Transform: AWS::Serverless-2016-10-31
Description: AWS-Private-Marketplace-Cross-Org-Member
Parameters:
  CrossAccountAccessRoleARN:
    Type: String
    Default: ""
    Description: "The ARN for the role that can be assumed by this account in order to read the DynamoDB tables of approved and Blocked Products in the management organization. You will get this value from the solution deployed in the management Organization."
  SNSTopicARN:
    Type: String
    Default: ""
    Description: "The SNS topic notifying an update is available. You will get this value from the solution deployed in the management Organization."
  ApprovedTableName:
    MinLength: "1"
    Type: String
    Description: "Name of Approved Products DynamoDB table in the management organization. You will get this value from the solution deployed in the management Organization."
  RejectedTableName:
    MinLength: "1"
    Type: String
    Description: "Name of Rejected Products DynamoDB table in the management organization. You will get this value from the solution deployed in the management Organization."
  SyncTimestampsTableName:
    MinLength: "1"
    Type: String
    Description: "Name of the SyncTimestamps table in the management organization. You will get this value from the solution deployed in the management Organization."
  MemberExperienceIds:
    Default: ""
    Type: String
    Description: "Local experience Id(s) to where the experience in the management org should be synced. If left in black the all experience in the local account will be synced."
  BlockPMPAministration:
    Default: "yes"
    AllowedValues:
      - "no"
      - "yes"
    Type: String
    Description: "Do you want to block Private Marketplace administration from all accounts in your AWS Organization using SCPs."
  IgnoreBoundaryForUsers:
    Default: ""
    Type: String
    Description: "Comma separated list of users that won't be subject to the BlockPMPAdminBoundary"
  IgnoreBoundaryForRoles:
    Default: ""
    Type: String
    Description: "Comma separated list of roles that won't be subject to the BlockPMPAdminBoundary"
Globals:
  Function:
    Runtime: Python3.9
    Environment:
      Variables:
        LOG_LEVEL: "INFO"
Conditions:
  CreateSSMMemberExperienceIds: !Not [!Equals [!Ref MemberExperienceIds, ""]]
  DeploySCP: !Equals [!Ref BlockPMPAministration, "yes"]
  SetBoundary: !Equals [!Ref BlockPMPAministration, "yes"]
Resources:
  lambdaPMProle:
    Type: AWS::IAM::Role
    Properties:
      Description: "This role enables the PMP lambda to run and gather the PMP information"
      Policies:
        - PolicyName: LambdaPMPPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:LabelParameterVersion"
                  - "ssm:GetParameters"
                  - "ssm:GetParameter"
                  - "ssm:DeleteParameters"
                  - "ssm:PutParameter"
                  - "ssm:DeleteParameter"
                  - "ssm:GetParametersByPath"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                  - "sqs:ReceiveMessage"
                  - "sts:AssumeRole"
                Resource:
                  - "arn:aws:ssm:*:*:parameter/pmp/*"
                  - !GetAtt SQSSyncNotifications.Arn
                  - !Ref CrossAccountAccessRoleARN
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:ListTagsLogGroup"
                  - "logs:DescribeLogStreams"
                  - "logs:DescribeSubscriptionFilters"
                  - "logs:DescribeMetricFilters"
                  - "logs:ListLogDeliveries"
                  - "aws-marketplace:GetAgreementApprovalRequest"
                  - "logs:CreateLogStream"
                  - "ssm:DescribeParameters"
                  - "logs:DescribeQueryDefinitions"
                  - "logs:DescribeResourcePolicies"
                  - "logs:DescribeDestinations"
                  - "aws-marketplace:ListAgreementRequests"
                  - "logs:DescribeQueries"
                  - "aws-marketplace:ViewSubscriptions"
                  - "logs:DescribeLogGroups"
                  - "aws-marketplace:SearchAgreements"
                  - "aws-marketplace:DescribeEntity"
                  - "aws-marketplace:ListAgreementApprovalRequests"
                  - "logs:CreateLogGroup"
                  - "logs:PutLogEvents"
                  - "logs:CreateLogDelivery"
                  - "logs:PutMetricFilter"
                  - "logs:DescribeExportTasks"
                  - "aws-marketplace:GetAgreementTerms"
                  - "logs:UpdateLogDelivery"
                  - "aws-marketplace:GetAgreementRequest"
                  - "aws-marketplace:ListEntities"
                  - "aws-marketplace:StartChangeSet"
                  - "aws-marketplace:DescribeChangeSet"
                Resource: "*"
      RoleName: "lambdaPMProle"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"

  SyncPMPMember:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 900
      MemorySize: 256
      CodeUri: src/lambda/
      Description: "This function reads the allowed and rejected products from a DynamoDB table in the management org and syncronizes it with all local member experiences"
      Role: !GetAtt lambdaPMProle.Arn
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: "1"
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSSyncNotifications.Arn
            BatchSize: 1

  SSMMemberExperienceIds:
    Type: AWS::SSM::Parameter
    Condition: CreateSSMMemberExperienceIds
    Properties:
      Name: /pmp/MemberExperienceIds
      Type: String
      Description: "The experience ids that will be synced with the products from the management org."
      Value: !Ref MemberExperienceIds

  SSMCrossAccountAccessRoleARN:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /pmp/CrossAccountAccessRoleARN
      Type: String
      Description: "This is the Role that allows us to read the DynamoDB tables in the management Org"
      Value: !Ref CrossAccountAccessRoleARN

  SSMRejectedTable:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /pmp/RejectedTable
      Type: String
      Description: "This is the name of the Rejected Products DynamoDB table in the management Org"
      Value: !Ref RejectedTableName

  SSMApprovedTable:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /pmp/ApprovedTable
      Type: String
      Description: "This is the name of the Approved Products DynamoDB table in the management Org"
      Value: !Ref ApprovedTableName

  SSMSyncTimestampsTableName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /pmp/SyncTimestampsTableName
      Type: String
      Description: "This is the name of the Approved Products DynamoDB table in the management Org"
      Value: !Ref SyncTimestampsTableName

  SQSSyncNotifications:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 3070
      VisibilityTimeout: 1020

  SQSSyncNotificationsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Id: SQSSyncNotificationsPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: Sid-SQSSyncNotificationsPolicy
            Effect: Allow
            Principal:
              AWS: "*"
            Action: SQS:SendMessage
            Resource: !GetAtt SQSSyncNotifications.Arn
            Condition:
              ArnLike:
                aws:SourceArn: !Ref SNSTopicARN
      Queues:
        - !Ref SQSSyncNotifications

  SnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt SQSSyncNotifications.Arn
      Region: !Ref "AWS::Region"
      TopicArn: !Ref SNSTopicARN

  BlockPMPAdminSCP:
    Condition: DeploySCP
    Type: AWS::Organizations::Policy
    Properties:
      TargetIds: [!GetAtt CRGetEnvInfo.root_id]
      Name: "BlockPMPAdminSCP"
      Description: Blocks Private Marketplace administration
      Type: SERVICE_CONTROL_POLICY
      Content: >-
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                  "Effect": "Deny",
                  "Action": [
                      "aws-marketplace:AssociateProductsWithPrivateMarketplace",
                      "aws-marketplace:DisassociateProductsFromPrivateMarketplace",
                      "aws-marketplace:ListPrivateMarketplaceRequests",
                      "aws-marketplace:DescribePrivateMarketplaceRequests",
                      "aws-marketplace:ListEntities",
                      "aws-marketplace:DescribeEntity",
                      "aws-marketplace:StartChangeSet",
                      "aws-marketplace:ListChangeSets",
                      "aws-marketplace:DescribeChangeSet",
                      "aws-marketplace:CancelChangeSet"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Deny",
                  "Action": [
                      "aws-marketplace:TagResource",
                      "aws-marketplace:UntagResource",
                      "aws-marketplace:ListTagsForResource"
                  ],
                  "Resource": "arn:aws:aws-marketplace:*:*:AWSMarketplace/*"
                }
            ]
        }

  GetEnvInfo:
    Condition: DeploySCP
    Type: AWS::Serverless::Function
    Properties:
      Handler: get_env_info.handler
      Runtime: python3.9
      CodeUri: src/get_env_info/
      Description: This lambda backs the custom resource to get environment info
      Role: !GetAtt GetEnvInfoRole.Arn

  CRGetEnvInfo:
    Condition: DeploySCP
    Type: AWS::CloudFormation::CustomResource
    DependsOn: GetEnvInfo
    Properties:
      ServiceToken: !GetAtt GetEnvInfo.Arn

  GetEnvInfoRole:
    Condition: DeploySCP
    Type: AWS::IAM::Role
    Properties:
      Description: "This role enables the GetEnvInfo lambda to get enviroment information"
      Policies:
        - PolicyName: "GetEnvInfoPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "organizations:ListRoots"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - "*"
      RoleName: "GetEnvInfoRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"

  BlockPMPAdminPolicyBoundary:
    Condition: SetBoundary
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: BlockPMPAdminPolicyBoundary
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"
          - Effect: Deny
            Action:
              - "aws-marketplace:AssociateProductsWithPrivateMarketplace"
              - "aws-marketplace:DisassociateProductsFromPrivateMarketplace"
              - "aws-marketplace:ListPrivateMarketplaceRequests"
              - "aws-marketplace:DescribePrivateMarketplaceRequests"
              - "aws-marketplace:ListEntities"
              - "aws-marketplace:DescribeEntity"
              - "aws-marketplace:StartChangeSet"
              - "aws-marketplace:ListChangeSets"
              - "aws-marketplace:DescribeChangeSet"
              - "aws-marketplace:CancelChangeSet"
            Resource: "*"
          - Effect: Deny
            Action:
              - "aws-marketplace:TagResource"
              - "aws-marketplace:UntagResource"
              - "aws-marketplace:ListTagsForResource"
            Resource: "arn:aws:aws-marketplace:*:*:AWSMarketplace/*"
          - Sid: CreateOrChangeUserOnlyWithBoundary
            Effect: Deny
            Action:
              - "iam:CreateUser"
              - "iam:PutUserPermissionsBoundary"
            Resource: "*"
            Condition:
              StringNotEquals:
                "iam:PermissionsBoundary": !Sub "arn:aws:iam::${AWS::AccountId}:policy/BlockPMPAdminPolicyBoundary"
          - Sid: CreateOrChangeRoleOnlyWithBoundary
            Effect: Deny
            Action:
              - "iam:CreateRole"
              - "iam:PutRolePermissionsBoundary"
            Resource: "*"
            Condition:
              StringNotEquals:
                "iam:PermissionsBoundary": !Sub "arn:aws:iam::${AWS::AccountId}:policy/BlockPMPAdminPolicyBoundary"
          - Sid: DenyBoundaryPolicyEdit
            Effect: Deny
            Action:
              - "iam:CreatePolicyVersion"
              - "iam:DeletePolicy"
              - "iam:DeletePolicyVersion"
              - "iam:SetDefaultPolicyVersion"
            Resource:
              - "arn:aws:iam::*:policy/BlockPMPAdminPolicyBoundary"
          - Sid: DenyBoundaryUserRoleDelete
            Effect: Deny
            Action:
              - "iam:DeleteUserPermissionsBoundary"
              - "iam:DeleteRolePermissionsBoundary"
            Resource: "*"
            Condition:
              StringEquals:
                "iam:PermissionsBoundary": !Sub "arn:aws:iam::${AWS::AccountId}:policy/BlockPMPAdminPolicyBoundary"
          - Sid: DenyDisableSCP
            Effect: Deny
            Action: "organizations:DisablePolicyType"
            Resource: "*"
            Condition:
              StringEquals:
                "organizations:PolicyType": "SERVICE_CONTROL_POLICY"
          - Sid: DenySCPEdit
            Action:
              - "organizations:DeletePolicy"
              - "organizations:DetachPolicy"
              - "organizations:UpdatePolicy"
            Effect: Deny
            Resource: !GetAtt BlockPMPAdminSCP.Arn

  SetBoundaryLambda:
    Condition: SetBoundary
    Type: AWS::Serverless::Function
    DependsOn: BlockPMPAdminPolicyBoundary
    Properties:
      Handler: set_boundary.handler
      Runtime: python3.9
      CodeUri: src/set_boundary/
      Timeout: 60
      Description: "This lambda sets a boundary to all Users and Roles existing in the account to: block PMP Admin, Block the creation of users without the boundary, delete the boundary and block the desativation of SCPs"
      Role: !GetAtt SetBoundaryRole.Arn
      Environment:
        Variables:
          PrincipalWithPreviousBoundaryTableName: !Ref PrincipalWithPreviousBoundary
          PermissionsBoundaryArn: !Ref BlockPMPAdminPolicyBoundary
          IgnoreBoundaryForRoles:
            !Join [",", [!Ref lambdaPMProle, !Ref IgnoreBoundaryForRoles]]
          IgnoreBoundaryForUsers: !Ref IgnoreBoundaryForUsers

  CRSetBoundary:
    Condition: SetBoundary
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetBoundaryLambda.Arn

  SetBoundaryRole:
    Condition: SetBoundary
    Type: AWS::IAM::Role
    Properties:
      Description: "Role for the SetBoundary lambda"
      Policies:
        - PolicyName: "SetBoundaryPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:PutItem"
                Resource:
                  - !GetAtt PrincipalWithPreviousBoundary.Arn
              - Effect: Allow
                Action:
                  - "iam:ListRoles"
                  - "iam:ListUsers"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "iam:PutRolePermissionsBoundary"
                  - "iam:PutUserPermissionsBoundary"
                  - "iam:DeleteRolePermissionsBoundary"
                  - "iam:DeleteUserPermissionsBoundary"
                  - "iam:GetUser"
                  - "iam:GetRole"
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:user/*"
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/*"

      RoleName: "SetBoundaryRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"

  PrincipalWithPreviousBoundary:
    Condition: SetBoundary
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "name"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "name"
          KeyType: "HASH"
      TableName: PrincipalWithPreviousBoundary
